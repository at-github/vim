extends phpunit

snippet php
<?php
${1}
?>
endsnippet

snippet ?
<?php ${1}; ?>
endsnippet

snippet <?=
<?=${1}?>
endsnippet

snippet ?=
<?=${1}?>
endsnippet

snippet ec
echo "${1:string}"${2};
endsnippet

snippet pr
print "${1:string}"${2};
endsnippet

snippet inc
include '${1:file}';${2}
endsnippet

snippet inc1
include_once '${1:file}';${2}
endsnippet

snippet req
require_once '${1:file}';${2}
endsnippet

snippet $_ "COOKIE['...']"
$_COOKIE['${1:variable}']${2}
endsnippet

snippet $_ "ENV['...']"
$_ENV['${1:variable}']${2}
endsnippet

snippet $_ "FILES['...']"
$_FILES['${1:variable}']${2}
endsnippet

snippet $_ "GET['...']"
$_GET['${1:variable}']${2}
endsnippet

snippet $_ "POST['...']"
$_POST['${1:variable}']${2}
endsnippet

snippet $_ "REQUEST['...']"
$_REQUEST['${1:variable}']${2}
endsnippet

snippet $_ "SERVER['...']"
$_SERVER['${1:variable}']${2}
endsnippet

snippet $_ "SESSION['...']"
$_SESSION['${1:variable}']${2}
endsnippet

snippet error
ini_set('display_errors', 1);
ini_set('track_errors',   1);
error_reporting(E_ALL);${1}
endsnippet

snippet /*
/**
 * ${1}
 */
endsnippet

snippet /**
/**
 * @brief : ${1}
 * @param : ${2}
 * @return: ${3}
 */
endsnippet

snippet doc_cp
/**
 * ${1:undocumented class}
 *
 * @package ${2:default}
 * @author Tarik
 */${3}
endsnippet

snippet doc_vp
/**
 * ${1:undocumented class variable}
 *
 * @var ${2:string}
 */${3}
endsnippet

snippet doc_v
/**
 * ${3:undocumented class variable}
 *
 * @var ${4:string}
 */
${1:var} $${2};${5}
endsnippet

snippet doc_c
/**
 * ${3:undocumented class}
 *
 * @packaged ${4:default}
 * @author Tarik
 */
${1:}class ${2:}
{${5}
} // END $1class $2
endsnippet

snippet doc_dp
/**
 * ${1:undocumented constant}
 */${2}
endsnippet

snippet doc_d
/**
 * ${3:undocumented constant}
 */
define(${1}, ${2});${4}
endsnippet

snippet doc_fp
/**
 * ${1:undocumented function}
 *
 * @return ${2:void}
 * @author Tarik
 */${3}
endsnippet

snippet doc_s
/**
 * ${4:undocumented function}
 *
 * @return ${5:void}
 * @author Tarik
 */
${1}function ${2}(${3});${6}
endsnippet

snippet doc_f
/**
 * ${4:undocumented function}
 *
 * @return ${5:void}
 * @author Tarik
 */
${1}function ${2}(${3})
{${6}
}
endsnippet

snippet doc_h
/**
 * ${1}
 *
 * @author Tarik
 * @version ${3:$Id$}
 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
 * @package ${5:default}
 */
endsnippet

snippet doc_i
/**
 * ${2:undocumented class}
 *
 * @package ${3:default}
 * @author Tarik
 */
interface ${1:}{${6}
} // END interface $1
endsnippet

snippet class "class"
/**
 * ${1:undocumented class}
 *
 * @package ${2:default}
 * @author Tarik
 */
class $1
{
    ${3}
}
endsnippet

snippet class "class/extends"
/**
 * ${1:undocumented class}
 *
 * @package ${2:default}
 * @author Tarik
 */
class $1 extends ${3:OtherClassName}
{
    ${4}
}
endsnippet

snippet class "class/abstract"
/**
 * ${1:undocumented class}
 *
 * @package ${2:default}
 * @author Tarik
 */
abstract class $1
{
    ${5}
    /**
     *
     */
    abstract protected function ${3}(${4:param});
}
endsnippet

snippet class "class/implements"
/**
 * ${1:undocumented class}
 *
 * @package ${2:default}
 * @author Tarik
 */
class $1 implements
    ${3:ClassName}
{
    public function ${4:MethodeInterfaceName}($4)
    {
        ${5}
    }
}
endsnippet

snippet class "class/abstract/implements"
/**
 * ${1:undocumented class}
 *
 * @package ${2:default}
 * @author Tarik
 */
abstract class $1 implements
    ${3:ClassName}
{
    public function ${4:MethodeInterfaceName}(${5})
    {
        ${6}
    }

    abstract protected function _${7}(${8}):
}
endsnippet

snippet interface
/**
 * ${1:undocumented interface}
 *
 * @package ${2:default}
 * @author Tarik
 */
interface $1 {
    ${3}
}
endsnippet

snippet trait
/**
 * ${1:undocumented trait}
 *
 * @package ${2:default}
 * @author Tarik
 */
trait $1 {
    ${3}
}
endsnippet

snippet pp
private $_${1} = ${2};${3}
endsnippet

snippet getset
/**
 * @brief : ${1:getter} $3
 * @return: ${2}, ${3:${2/([a-z]).*/$1/g}}
 */
public function get${3/[a-z](.*)/$1/g}()
{
    return $this->$3;
}

/**
 * @brief : ${4:set} $3
 * @param : $2, ${5:${2/([a-z]).*/$1/g}}
 * @return: object, ${6:this instance}
 */
public function set${3/[a-z](.*)/$1/g}($$5)
{
    $this->$3 = $$5;
    return $this;
}

endsnippet

snippet namespace
namespace ${1};${2}
endsnippet

snippet use
use Exception, ${1};${2}
endsnippet

snippet wh
while (${1:/* condition */}) {
    ${2:// code...}
}
endsnippet

snippet do
do {
    ${2:// code... }
} while(${1:/* condition */});
endsnippet

snippet if
if (${1:/* condition */}){
    ${2:// code...}
}
endsnippet

snippet ife
if (${1:/* condition */}){
    ${2:// code...}
} else {
    ${3:// code...}
}
${4}
endsnippet

snippet else
else {
    ${1:// code...}
}
endsnippet

snippet elseif
elseif (${1:/* condition */}){
    ${2:// code...}
}
endsnippet

snippet t
$${1:retVal} =(${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet switch
switch ($${1:variable}){
    case '${2:value}':
        ${3:// code...}
        break;
    ${5}
    default:
        ${4:// code...}
        break;
}
endsnippet

snippet case
case '${1:value}':
    ${2:// code...}
    break;${3}
endsnippet

snippet for
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
    ${4: // code...}
}
endsnippet

snippet foreach
foreach ($${1:variable} as $${2:key}) {
    ${3:// code...}
}
endsnippet

snippet fun
${1:public|private }function ${2:functionName}(${3})
{
    ${4:// code...}
}
endsnippet

snippet arr
array('${1}' => ${2});${3}
endsnippet

snippet array
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet die
die(${1});${2}
endsnippet

snippet vd
var_dump(${1:subject});${2}
endsnippet

snippet vda
var_dump([
    '${1:variable name}' => $$1
]);${2}
endsnippet

snippet pd
echo '<pre>';
var_dump($${1});
echo '</pre>';${2}
endsnippet

snippet pdd
echo '<pre>';
var_dump($${1});
echo '</pre>';
die();${2}
endsnippet

snippet jsondebug
echo json_encode($${1});${2}
endsnippet

snippet throw
throw new Exception('${1:message}');
${2}
endsnippet

snippet try
try {
    ${1:${VISUAL}};
} catch (Exception $e){
    print "${2:message}: $e";
}
${3}
endsnippet

snippet singleton
private static $oInstance;

/**
 * @brief : ${1:describe singleton}
 */
private function __construct(){
    ${2}
}

/**
 * @brief : $1
 */
private function __clone(){
    $2
}

/**
 * @brief : ${3:getter of this object}
 * @return: ${4:object, instance of this class}
 */
public static function getInstance(){
    if (null === self::$oInstance){
        self::$oInstance = new self();
    }

    return self::$oInstance;
}

${5}
endsnippet
