snippet php
	<?php
	${1}
	?>
snippet ?
	<?php ${1}; ?>
snippet <?=
	<?=${1}?>
snippet ?=
	<?=${1}?>
snippet ec
	echo "${1:string}"${2};
snippet pr
	print "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
snippet /**
	/**
	 * @brief : ${1}
	 * @param : ${2}
	 * @return: ${3}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author Tarik
	 */${3}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author Tarik
	 */
	${1:}class ${2:}
	{${5}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author Tarik
	 */${3}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author Tarik
	 */
	${1}function ${2}(${3});${6}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author Tarik
	 */
	${1}function ${2}(${3})
	{${6}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author Tarik
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 */
	
	/**
	 * Define DocBlock
	 */
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author Tarik
	 */
	interface ${1:}{${6}
	} // END interface $1
snippet class class
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author Tarik
	 */
	class $1
	{
		${3}
	}
snippet class class/extends
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author Tarik
	 */
	class $1 extends ${3:OtherClassName}
	{
		${4}
	}
snippet class class/abstract
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author Tarik
	 */
	abstract class $1
	{
		${5}
		/**
		*
		*/
		abstract protected function ${3}(${4:param});
	}
snippet class class/implements
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author Tarik
	 */
	class $1 implements
		${4:ClassName}
	{
		/**
		* Implements method interface
		*/
		public function ${5:MethodeInterfaceName}()
		{
			${6}
		}
	}
snippet class class/abstract/implements
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author Tarik
	 */
	abstract class $1 implements
		${3:ClassName}
	{
		/**
		* Implements method interface
		*/
		public function ${4:MethodeInterfaceName}()
		{
			${7}
		}

		abstract protected function _${5}(${6}):
	}
# interface
snippet interface
	/**
	 * ${1:undocumented interface}
	 * 
	 * @package ${2:default}
	 * @author Tarik
	 */
	interface $1 {
		${3}
	}
# trait
snippet trait
	/**
	 * ${1:undocumented trait}
	 * 
	 * @package ${2:default}
	 * @author Tarik
	 */
	trait $1 {
		${3}
	}
#
snippet pp
	private $_${1} = ${2};${3}
#
snippet getset
	/**
	* return ${1:property}
	*/
	public function get${2:Proprety}()
	{
		return $this->$1;
	}

	/**
	* setting $1
	* @param ${4:type variable}
	*/
	public function set$2($${3:param})
	{
		$this->$1 = $$3;${4}
		return $this;
	}
#namespace
snippet namespace
	namespace ${1};${2}
#use
snippet use
	use Exception, ${1};${2}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while(${1:/* condition */});
snippet if
	if (${1:/* condition */}){
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}){
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}){
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} =(${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}){
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet fun
	${1:public|private }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
snippet arr
	array('${1}' => ${2});${3}
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
snippet die
	die(${1});${2}
snippet vd
	var_dump(${1:subject},${2});${3}
snippet pd
	echo '<pre>';
	var_dump($${1});
	echo '</pre>';${2}
snippet pdd
	echo '<pre>';
	var_dump($${1});
	echo '</pre>';
	die();${2}
snippet throw
	throw new Exception('${1:message}');
	${2}
snippet try
	try {
		${1};
	} catch (Exception $e){
		print "${2:message}: $e";
	}
	${3}
